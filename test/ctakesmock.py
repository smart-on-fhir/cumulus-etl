"""Holds mock methods for ctakesclient.client"""

import unittest
from unittest import mock

from ctakesclient import typesystem


class CtakesMixin(unittest.TestCase):
    def setUp(self):
        super().setUp()

        nlp_patcher = mock.patch('cumulus.ctakes.ctakesclient.client.extract',
                                 side_effect=lambda x: fake_ctakes_extract(x))
        self.addCleanup(nlp_patcher.stop)
        self.nlp_mock = nlp_patcher.start()


def fake_ctakes_extract(sentence: str) -> typesystem.CtakesJSON:
    """
    Simple fake response from cTAKES

    The output is fairly static:
    - The 1st word is marked as a 'patient'
    - The 2nd word is marked as a 'fever'
    - The rest are ignored
    """
    words = sentence.split()

    if len(words) < 2:
        return typesystem.CtakesJSON()

    patient_word = words[0]
    patient_begin = 0
    patient_end = len(patient_word)

    fever_word = words[1]
    fever_begin = patient_end + 1
    fever_end = fever_begin + len(fever_word)

    # Response template generated by sending "Patient has a fever"
    response = {
      'SignSymptomMention': [
        {
          'begin': fever_begin,
          'end': fever_end,
          'text': fever_word,
          'polarity': 0,
          'conceptAttributes': [
            {
              'code': '386661006',
              'cui': 'C0015967',
              'codingScheme': 'SNOMEDCT_US',
              'tui': 'T184'
            },
            {
              'code': '50177009',
              'cui': 'C0015967',
              'codingScheme': 'SNOMEDCT_US',
              'tui': 'T184'
            }
          ],
          'type': 'SignSymptomMention'
        }
      ],
      'IdentifiedAnnotation': [
        {
          'begin': patient_begin,
          'end': patient_end,
          'text': patient_word,
          'polarity': 0,
          'conceptAttributes': [
            {
              'code': 'n/a',
              'cui': 'CE_64',
              'codingScheme': 'custom',
              'tui': 'T0NA'
            }
          ],
          'type': 'IdentifiedAnnotation'
        },
        {
          'begin': fever_begin,
          'end': fever_end,
          'text': fever_word,
          'polarity': 0,
          'conceptAttributes': [
            {
              'code': 'n/a',
              'cui': 'a0_27',
              'codingScheme': 'custom',
              'tui': 'T0NA'
            },
            {
              'code': 'n/a',
              'cui': 'DIS_31',
              'codingScheme': 'custom',
              'tui': 'T0NA'
            },
            {
              'code': 'n/a',
              'cui': 'a0_36',
              'codingScheme': 'custom',
              'tui': 'T0NA'
            }
          ],
          'type': 'IdentifiedAnnotation'
        }
      ]
    }

    return typesystem.CtakesJSON(response)
