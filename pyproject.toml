[project]
name = "cumulus-etl"
requires-python = ">= 3.10"
# These dependencies are mostly pinned to be under the next major version.
# That makes particular sense as long as we don't have official releases yet and our docker
# images are built from main directly every commit.
#
# We mitigate the risk of missing a new release by having a bot watch for them.
#
# But if we ever start releasing on PyPI, we could switch to open-pinned dependencies to be
# less annoying to pip users.
dependencies = [
    "ctakesclient >= 5.1, < 6",
    "cumulus-fhir-support >= 1.2, < 2",
    "delta-spark >= 3.2.1, < 4",
    "httpx < 1",
    "inscriptis < 3",
    "jwcrypto < 2",
    "label-studio-sdk < 2",
    "nltk >= 3.9, < 4",
    "openai < 2",
    "oracledb < 4",
    "philter-lite < 1",
    "pyarrow < 20",
    "rich < 14",
    "s3fs",
]
authors = [
  { name="Andy McMurry, PhD", email="andrew.mcmurry@childrens.harvard.edu" },
  { name="Michael Terry", email="michael.terry@childrens.harvard.edu" },
]
readme = "README.md"
license = { text="Apache License 2.0" }
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["description", "version"]

[project.optional-dependencies]
tests = [
    "coverage",
    "ddt",
    "moto[server,s3] >= 5.0",
    "pytest",
    "pytest-cov",
    "respx",
    "time-machine",
]
dev = [
    "pre-commit",
    # Ruff is using minor versions for breaking changes until their 1.0 release.
    # See https://docs.astral.sh/ruff/versioning/
    "ruff < 0.10",  # keep in rough sync with pre-commit-config.yaml
]

[project.urls]
"Homepage" = "https://github.com/smart-on-fhir/cumulus-etl"

[project.scripts]
cumulus-etl = "cumulus_etl.cli:main_cli"

[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.sdist]
include = [
    "docs/",
    "tests/",
    "LICENSE",
]
exclude = [
    "**/.pytest_cache",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
allowed-confusables = ["â€™"]  # allow proper apostrophes
select = [
    "A",  # prevent using keywords that clobber python builtins
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "PLE",  # pylint errors
    "RUF",  # the ruff developer's own rules
    "S",  # bandit security warnings
    "UP",  # alert you when better syntax is available in your python version
]
ignore = [
    # E501 is the line-too-long check.
    # Ruff formatting will generally control the length of Python lines for us.
    # But it leaves comments alone. And since we used to have a longer line length (120),
    # we have a lot of legacy comments over 100 width.
    # Just disable the check for now, rather than manually fixing all 300+ lines.
    # Hopefully we can address them slowly over time.
    "E501",
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]  # init files hold API, so not using imports is intentional
"tests/**" = ["S"]  # tests do suspicious stuff that's fine, actually
